<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" 
               xmlns:s="library://ns.adobe.com/flex/spark" 
               xmlns:mx="library://ns.adobe.com/flex/mx"
               minWidth="955" minHeight="600" backgroundAlpha="0"
               frameRate="60"
               applicationComplete="onApplicationComplete()">
    <fx:Script>
        <![CDATA[
            import mx.collections.ArrayCollection;
            import mx.events.ResizeEvent;
            
            import net.hires.debug.Stats;
            
            import sk.yoz.ycanvas.map.MapController;
            import sk.yoz.ycanvas.map.display.MapStroke;
            import sk.yoz.ycanvas.map.utils.GeoUtils;
            
            import starling.core.Starling;
            import starling.display.Sprite;
            import starling.events.Event;
            
            private var engine:Starling;
            private var strokeRail1:MapStroke;
            
            private var bigMap:HelperBigMap;
            private var smallMap:HelperSmallMap;
            
            [Bindable]
            private var componentList:ArrayCollection;
            
            [Bindable]
            private var modeList:ArrayCollection;
            
            private function onApplicationComplete():void
            {
                var viewPort:Rectangle = new Rectangle(0, 0, stage.stageWidth, stage.stageHeight);
                engine = new Starling(starling.display.Sprite, stage, viewPort, stage.stage3Ds[0]);
                engine.start();
                engine.addEventListener(starling.events.Event.ROOT_CREATED, onStarlingRootCreated);
                
                modeList = new ArrayCollection;
                modeList.addItem({label: "Map Quest", data: Maps.MAP_CONFIG_MAPQUEST});
                modeList.addItem({label: "OSM", data: Maps.MAP_CONFIG_OSM});
                modeList.addItem({label: "MapBox", data: Maps.MAP_CONFIG_MAPBOX});
                modeList.addItem({label: "CloudMade", data: Maps.MAP_CONFIG_CLOUDMADE});
                modeList.addItem({label: "ESRI", data: Maps.MAP_CONFIG_ESRI});
            }
            
            private function resizeComponents(...rest):void
            {
                var global:Point = placeholder.localToGlobal(new Point(0, 0));
                var width:uint = placeholder.width;
                var height:uint = placeholder.height;
                engine.viewPort = new Rectangle(global.x, global.y, width, height);
                engine.stage.stageWidth = width;
                engine.stage.stageHeight = height;
                
                bigMap.resize();
                smallMap.resize();
                
                syncLatLon();
            }
            
            private function syncLatLon():void
            {
                latInput.value = GeoUtils.y2lat(bigMap.map.center.y);
                lonInput.value = GeoUtils.x2lon(bigMap.map.center.x);
            }
            
            private function onStarlingRootCreated(event:starling.events.Event, root:starling.display.Sprite):void
            {
                var container:starling.display.Sprite = new starling.display.Sprite();
                //container.x = 300;
                //container.y = -200;
                root.addChild(container);
                
                bigMap = new HelperBigMap();
                container.addChild(bigMap.map.component);
                
                smallMap = new HelperSmallMap(bigMap.map);
                container.addChild(smallMap.map.component);
                
                resizeComponents();
                
                placeholder.addChild(new Stats());
                placeholder.addEventListener(ResizeEvent.RESIZE, resizeComponents);
                
                componentList = new ArrayCollection;
                componentList.addItem({label: "Big Map", data: bigMap.map});
                componentList.addItem({label: "Small Map", data: smallMap.map});
                
                stage.addEventListener(MouseEvent.MOUSE_UP, onStageMouseUp);
            }
            
            private function onUpdateComponentClick():void
            {
                var component:MapController = componentSelector.selectedItem.data;
                component.config = modeSelector.selectedItem.data;
            }
            
            private function onSyncCheckBoxChange():void
            {
                smallMap.autoSync = syncCheckBox.selected;
            }
            
            private function onZoomInClick():void
            {
                bigMap.transformationManager.scaleByTween(1.5);
            }
            
            private function onZoomOutClick():void
            {
                bigMap.transformationManager.scaleByTween(1 / 1.5);
            }
            
            private function onNavigateClick():void
            {
                bigMap.transformationManager.moveToTween(GeoUtils.lon2x(lonInput.value), GeoUtils.lat2y(latInput.value));
            }
            
            private function onRotationSliderChange(event:flash.events.Event):void
            {
                var rotation:Number = rotationInput.value * 0.0174532925;
                bigMap.transformationManager.rotateToTween(rotation);
            }
            
            private function onAddMarkerClick():void
            {
                bigMap.addMarkerAt(GeoUtils.lon2x(lonInput.value), GeoUtils.lat2y(latInput.value));
            }
            
            private function onPlaceholderMouseDown():void
            {
                if(!addMarkerOnClick.selected)
                    return;
                
                var position:Point = bigMap.map.globalToCanvas(new Point(mouseX, mouseY));
                bigMap.addMarkerAt(position.x, position.y);
            }
            
            private function onRotationSliderMouseDown():void
            {
                bigMap.transformationManager.allowMove = false;
                bigMap.transformationManager.allowZoom = false;
            }
            
            private function onZoomingButtonsMouseDown():void
            {
                bigMap.transformationManager.allowMove = false;
                bigMap.transformationManager.allowZoom = false;
            }
            
            private function onStageMouseUp(event:MouseEvent):void
            {
                bigMap.transformationManager.allowMove = true;
                bigMap.transformationManager.allowZoom = true;
            }
            
            private function onCheckBoxShowRail1(event:flash.events.Event):void
            {
                var checkBox:CheckBox = event.currentTarget as CheckBox;
                if(checkBox.selected)
                {
                    strokeRail1 = new MapStroke(Strokes.RAIL1, 10, 0xff0000, 1);
                    bigMap.strokeLayer.add(strokeRail1);
                    bigMap.transformationManager.moveRotateScaleToTween(
                        strokeRail1.originalPoints[strokeRail1.originalPoints.length / 2],
                        strokeRail1.originalPoints[strokeRail1.originalPoints.length / 2 + 1], 0, 1 / 2000);
                }
                else if(strokeRail1)
                {
                    bigMap.strokeLayer.remove(strokeRail1);
                    strokeRail1.dispose();
                    strokeRail1 = null;
                }
            }
        ]]>
    </fx:Script>
    
    <s:layout>
        <s:HorizontalLayout gap="0"/>
    </s:layout>
    
    <s:VGroup width="200">
        <s:DropDownList id="componentSelector" dataProvider="{componentList}" requireSelection="true" width="100%"/>
        <s:DropDownList id="modeSelector" dataProvider="{modeList}" requireSelection="true" width="100%"/>
        <s:Button label="Update Tile Provider" click="onUpdateComponentClick()"/>
        <mx:HRule width="100%"/>
        
        <s:CheckBox id="syncCheckBox" change="onSyncCheckBoxChange()" label="sync small and big map" selected="true"/>
        <mx:HRule width="100%"/>
        
        <s:HGroup width="100%">
            <s:NumericStepper id="latInput" minimum="-90" maximum="90" snapInterval="0.001" width="100%"/>
            <s:NumericStepper id="lonInput" minimum="-180" maximum="180" snapInterval="0.001" width="100%"/>
        </s:HGroup>
        <s:Button label="Navigate" click="onNavigateClick()"/>
        <s:Button label="Add Marker" click="onAddMarkerClick()"/>
        <mx:HRule width="100%"/>
        
        <s:CheckBox id="addMarkerOnClick" change="onSyncCheckBoxChange()" label="Add Marker on click" selected="false"/>
        
        <mx:HRule width="100%"/>
        <s:CheckBox label="Show Rail 1" change="onCheckBoxShowRail1(event)"/>
        
    </s:VGroup>
    
    <s:Group width="100%" height="100%" mouseDown="onPlaceholderMouseDown()">
        <mx:UIComponent id="placeholder" width="100%" height="100%"/>
        
        <s:HSlider id="rotationInput" minimum="-180" maximum="180" bottom="20" right="80" snapInterval="10"
                   focusEnabled="false" change="onRotationSliderChange(event)"
                   mouseDown="onRotationSliderMouseDown()"/>
        
        <s:VGroup bottom="20" right="20" gap="0" mouseDown="onZoomingButtonsMouseDown()">
            <s:Button label="+" width="30" click="onZoomInClick()"/>
            <s:Button label="-" width="30" click="onZoomOutClick()"/>
        </s:VGroup>
    </s:Group>
</s:Application>
